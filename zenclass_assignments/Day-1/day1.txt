Difference between HTTP 1.1 and HTTP/2:

HTTP/2 is a new version of the Hypertext Transport Protocol. 
HTTP/2 is used to deliver pages to the browser from server on the Web. 
It is the first major update of HTTP. In 1999 HTTP was introduced, 
during this time webpages were usually just a single HTML file with inline CSS. 
Now we are facing the limitations of HTTP 1.1 as Internet has changed a lot from 1999 till present. 
For most modern websites there is transfer speed limits because data is downloaded in queue 
i.e. the previous part is downloaded first then next page is downloaded and so on, 
and about hundred request is needed to download an average modern webpage 
(webpage requests images, files, css, javascript files, etc..)

To overcome these problems HTTP/2 is introduced with few fundamental changes

1.In HTTP/2 all the requests will be downloaded in parallel 
  while in HTTP 1.1 requests were made in a queue.

2.In HTTP/2, HTTP headers are compressed, 
  but in HTTP 1.1 headers are not compressed.

3.In HTTP/2, server can "push" the data without user's request, 
  this will increase the speed for users with high latency. 
  While in HTTP 1.1 speed for users is less.

4.In HTTP/2 pages are transferred through wire as a binary which is more efficient. 
While in HTTP 1.1 pages are transferred through wire as text files which was not efficient.
 
Google Chrome and Mozilla Firefox has stated that they will support HTTP/2 only for HTTPS connections 
due to security reasons even though HTTP/2 does not require encryption. 
Therefore we must secure servers with HTTPS if we decide to set up servers with HTTP/2



Objects and its internal representation in javascript: 

Objects are important data types in javascript. Objects are different than primitive datatypes 
(i.e. number, string, boolean, etc.). Primitive data types contain one value 
but Objects can hold many values in form of Key: value pair. 

These keys can be variables or functions and are called properties and methods, 
respectively, in the context of an object.

Every object has some property associated with some value. 
These values can be accessed using these properties associated with them.
	var myCar = new Object();
	myCar.make = 'Mercedes';
	myCar.model = '520';
	myCar.year = 2010;
	myCar.wheels = 2;

After creating myCar object, the value inside the object can be accessed using keys.
i.e.
	myCar.year
	Output: 2010

These values can be accessed using brackets notation also.
	myCar[year]
	Output: 2010

The syntax for adding a property to an object is :
	ObjectName.ObjectProperty = propertyValue;

The syntax for deleting a property from an object is:
	delete ObjectName.ObjectProperty;

The syntax to access a property from an object is:
	objectName.property        
           //or
	objectName["property”]     
           //or
	objectName[expression]   

So, conclusion and simple definition for Java Script properties is 
“Properties are the values associated with a JavaScript object”.

Object methods: 

An object method is an object property containing a function definition.
i.e., Let’s assume to start the car there will be a mechanical functionality.
	function()
	{return ignition.on}
and so similar is to stop/brake/headlights on & off, etc.

So, conclusion and simple definition for Java Script Object methods is 
“Methods are actions that can be performed on objects.”


Create JavaScript Object with Object Literal: 

One of easiest way to create a javascript object is object literal, 
simply define the property and values inside curly braces as shown below

	let bike = {name: 'SuperSport', maker:'Ducati', engine:'937cc'};


Create JavaScript Object with Constructor: 

Constructor is nothing but a function and with help of new keyword, 
constructor function allows to create multiple objects of same flavor as shown below
	function Vehicle(name, maker) {
  	  this.name = name;
   	  this.maker = maker;
	}
	let car1 = new Vehicle(’Fiesta’, 'Ford’);
	let car2 = new Vehicle(’Santa Fe’, 'Hyundai’)
	console.log(car1.name);    //Output: Fiesta
	console.log(car2.name);    //Output: Santa Fe


Using the JavaScript Keyword new: 

The following example also creates a new JavaScript object with four properties:
	var person = new Object();
	person.firstName = “John”;
	person.lastName = “Doe”;
	person.age = 50;
	person.eyeColor = “blue”;

Using the Object.create method: 

Objects can also be created using the Object.create() method. 
This method can be very useful, because it allows you to choose 
the prototype object for the object you want to create, 
without having to define a constructor function.

// Animal properties and method encapsulation
	var Animal = {
 	 type: 'Invertebrates', // Default value of properties
  	 displayType: function() 
         {  // Method which will display type of Animal
    	 console.log(this.type);
  	 }
	 };

// Create new animal type called animal1 
	var animal1 = Object.create(Animal);
	animal1.displayType(); 
	// Output:Invertebrates

// Create new animal type called Fishes
	var fish = Object.create(Animal);
	fish.type = 'Fishes';
	fish.displayType(); 
	// Output:Fishes


